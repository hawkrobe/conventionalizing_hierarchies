///fold:
var getTrajectories = function(data) {
  var keys = _.keys(data[0]);
  return reduce(function(key, memo) {
    var timeBasedKeys = map(function(i) {return key + "." + i}, _.range(data.length));
    var vals = _.map(data, key);
    return extend(_.zipObject(timeBasedKeys, vals), memo)
  }, [], keys)
};
///

// set up speaker optimality & number of iterations
var params = {
  alpha : 1,
  beta : 1,
  numSteps : 6
};

// possible states of the world
var states = ['dalmatian', 'poodle', 'dalmatian+poodle'];
var statePrior =  Categorical({vs: states, ps: [1/3, 1/3, 1/3]});

// possible utterances
var utterances = ['label1', 'label2', 'label3'];
var utterancePrior = Categorical({vs: utterances, ps: [1/3, 1/3, 1/3]});

// takes a sample from a (discretized) dirichlet distribution for each word,
// representing the extent to which that word describes each object
var lexiconPrior = function(){
  var meanings = map(function(utt) {
    var uniqueID = [utt, globalStore.originAgent].join('_');
    
    var dirichletGuide = function() {
      return Dirichlet({alpha : Vector([
	softplus(param({name: ['a', uniqueID].join('_')})),
	softplus(param({name: ['b', uniqueID].join('_')})),
	softplus(param({name: ['c', uniqueID].join('_')}))
      ])});
    };
    
    var probs = sample(Dirichlet({alpha: ones([3,1])}), {guide: dirichletGuide});
    return _.zipObject(states, probs);
  }, utterances);
  return _.zipObject(utterances, meanings);
};

// length-based cost (although they're all the same length here)
var uttCost = function(utt) {
  return utt.split(' ').length;
};

// Looks up the meaning of an utterance in a lexicon object
var uttFitness = function(utt, state, lexicon) {
  return Math.log(lexicon[utt][state]);
};

// literal listener (using real-valued lexicon)
var L0 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var stateSet = sample(statePrior);
    factor(uttFitness(utt, stateSet, lexicon));
    return stateSet;
  });
});

// pragmatic speaker 
var S1 = cache(function(state, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    factor(params.alpha * (L0(utt, lexicon).score(state))
           - params.beta * uttCost(utt));
    return utt;
  });
});

// conventional listener
var L1 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    observe(S1(state, lexicon), utt);
    return state;
  });
});

var lexiconModel = function() {
  var lexicon = lexiconPrior();
  if(globalStore.data.length > 0) {
    mapData({data: globalStore.data}, function(datum){
      if(globalStore.originAgent == 'L')
	observe(S1(datum.response, lexicon), datum['utt']);
      else if(globalStore.originAgent == 'S')
	observe(L0(datum.utt, lexicon), datum['response']);
    });
  }
  return lexicon;
};

// compute lexicon posterior, taking into account some previous observations
// speakers do this by assuming data came from knowledgable listener, and vice versa
var updateBeliefs = function(originAgent, data) {
  // Only condition on most recent datapoint, since we're using learned params as prior
  globalStore.data = data;
  globalStore.originAgent = originAgent;
  globalStore.roundNum = data.length;

  Optimize({model: lexiconModel,
	    method: 'optimize', steps: 5000, verbose: false,
	    optMethod: {adam: {stepSize: .01}}});
};

// conventional listener (L1, marginalizing over lexicons)
var L = cache(function(utt, data) {
  updateBeliefs('L', data);
  return Infer({method: 'forward', samples: 10000, guide: true, model: function() {
    var dist = L1(utt, lexiconPrior());
    return sample(dist, {guide() {return dist;}});
  }});
});

// conventional speaker (S1, reasoning about expected L1 behavior across lexicons)
// use importance sampling from optimized lexicon prior
var S = cache(function(state, data) {
  updateBeliefs('S', data);
  return Infer({method: 'enumerate'}, function(){
    var utt = sample(utterancePrior);

    var expectedUtility = expectation(Infer({
      method: 'forward', samples: 10000, guide: true, model: function() {
	var listener = L0(utt, lexiconPrior());
	return params.alpha[0]  * listener.score(state) - params.beta[0] * uttCost(utt);
      }
    }));
    
    factor(expectedUtility);

    return utt;
  });
});

var model = function() {
  setFreshParamsId();
  console.log('sample...');
  var step = function(data) {
    if(data.length > params.numSteps[0]) return getTrajectories(data);
    var state = sample(statePrior);
    var utt = sample(S(state, data));
    var response = sample(L(utt, data));
    var newDatum = {utt, response, intended: state, acc: state == response};
    return step(data.concat(newDatum));
  };
  step([]);
};

var data = [{"utt":"label3","response":"poodle"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label3","response":"poodle"}];
console.log(lexiconPosterior('S',data).MAP());
